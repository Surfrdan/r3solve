#!/usr/bin/env python3

import argparse
from multiprocessing.dummy import Pool as ThreadPool
import os
import sys
import datetime
import random
import time
from dns import resolver,reversename
from dns.exception import DNSException
from termcolor import colored

script_dir = os.path.dirname(os.path.realpath(__file__))
status_tally = dict() 

def parse_args():
    arg_w_help = 'Hostlist file e.g. hostlist.txt'
    arg_T_help = 'Timeout in seconds'
    arg_t_help = 'Number of threads to use. Defaults to 120 which can be too much on slow machines or connections'
    arg_p_help = 'Optional prefix e.g. www'
    arg_s_help = 'Optional suffix e.g. google.com'
    arg_i_help = 'IPs to ignore'
    arg_l_help = 'Rate Limit in requests per minute'
    arg_q_help = 'Quiet mode. No debug or banner just the hosts'
    arg_r_help = 'Resolvers file'
    arg_D_help = 'Debug mode'

    parser = argparse.ArgumentParser()
    parser.add_argument('-w', '--hostlist', type=str, help=arg_w_help, nargs='?', required=True)
    parser.add_argument('-T', '--timeout', type=int, help=arg_t_help, default=10)
    parser.add_argument('-t', '--threads', type=int, help=arg_t_help, default=120)
    parser.add_argument('-p', '--prefix', type=str, help=arg_p_help, default=False)
    parser.add_argument('-s', '--suffix', type=str, help=arg_s_help, default=False)
    parser.add_argument('-i', '--ignore', type=str, help=arg_i_help, default=False)
    parser.add_argument('-r', '--resolvers', type=str, help=arg_r_help, default="{}/resolvers.txt".format(script_dir))
    parser.add_argument('-D', '--debug', action='store_true', help=arg_D_help, default=False)
    return parser.parse_args()

def get_resolver():
    res = resolver.Resolver()
    f = open(args.resolvers)
    res.nameservers = f.read().splitlines()
    #res.nameservers = ['1.1.1.1','8.8.8.8']
    return res

def is_ipaddress(address):
    parts = address.split(".")
    if len(parts) != 4:
        return False
    for item in parts:
        try:
            i = int(item)
        except ValueError:
            return False
        if not str(i).isnumeric():
            return False
        if not i <= 255:
            return False 
    return True

def make_request(host):
    global request_count, file_count, res
    request_count += 1
    try:
        if is_ipaddress(host):
            try:
                host = reversename.from_address(host)
                print(str(resolver.query(host,"PTR")[0])[:-1])
            except (Exception) as e:
                if args.debug:
                    print(sys.exc_info()[0])
                    print(e) 
            return
        else:
            answers = res.query(host)
        if args.ignore:
            if str(answers.rrset[0]) in args.ignore:
                return 
        if answers:
            print(host)
            sys.stdout.flush()
        else:
            pass
    except (DNSException) as e:
        if args.debug:
            print(sys.exc_info()[0])
            print(e)
        pass

def read_hostlist():
    try:
        hostlist = open(args.hostlist, encoding = "ISO-8859-1")
        hosts = hostlist.read().splitlines()
        if hosts:
            return hosts
        else:
            return []
    except NameError:
        pass

def main_loop(hosts):
    global file_count
    for idx, host in enumerate(hosts):
        file_count += 1
        h = str(host).strip()

        if args.prefix:
            h = '{0}{1}'.format(args.prefix, h)
        if args.suffix:
            h = '{0}{1}'.format(h, args.suffix)
        hosts[idx] = h
    pool = ThreadPool(args.threads)
    new_results = pool.map_async(make_request, hosts)
    pool.close()
    pool.join()

try:
    args = parse_args()
    file_count = 0
    request_count = 0
    if args.ignore:
        args.ignore = [str(x) for x in args.ignore.split(',')]

    res = get_resolver()
    hosts = read_hostlist()
    main_loop(hosts)
except KeyboardInterrupt:
    sys.exit(1)
