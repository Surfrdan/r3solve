#!/usr/bin/env python3

import argparse
from multiprocessing.dummy import Pool as ThreadPool
import os
import sys
import datetime
import random
import time
from dns import resolver
from dns.exception import DNSException
from termcolor import colored

script_dir = os.path.dirname(os.path.realpath(__file__))
status_tally = dict() 

def parse_args():
    arg_w_help = 'Hostlist file e.g. hostlist.txt'
    arg_T_help = 'Timeout in seconds'
    arg_t_help = 'Number of threads to use. Defaults to 120 which can be too much on slow machines or connections'
    arg_p_help = 'Optional prefix e.g. www'
    arg_s_help = 'Optional suffix e.g. google.com'
    arg_l_help = 'Rate Limit in requests per minute'
    arg_q_help = 'Qiet mode. No debug or banner just the hosts'

    parser = argparse.ArgumentParser()
    parser.add_argument('-w', '--hostlist', type=str, help=arg_w_help, nargs='?', required=True)
    parser.add_argument('-T', '--timeout', type=int, help=arg_t_help, default=10)
    parser.add_argument('-t', '--threads', type=int, help=arg_t_help, default=120)
    parser.add_argument('-p', '--prefix', type=str, help=arg_p_help, default=False)
    parser.add_argument('-s', '--suffix', type=str, help=arg_s_help, default=False)
    parser.add_argument('-l', '--ratelimit', type=int, help=arg_l_help, default=0)
    parser.add_argument('-q', '--quiet', help=arg_q_help, action='store_true')
    return parser.parse_args()

def print_banner():
    banner = """ 
             _____           _
         _ _|___ / ___  ___ | |_   _____
        | '__||_ \/ __|/ _ \| \ \ / / _ \ 
        | |  ___) \__ \ (_) | |\ V /  __/
        |_| |____/|___/\___/|_| \_/ \___|
           A DNS Resolver Tool - By Surfrdan
   """
    print(colored(banner, 'magenta'))

def timestamp():
    return datetime.datetime.now().strftime("%X")

def get_resolver():
    res = resolver.Resolver()
    res.nameservers = ['1.1.1.1','8.8.8.8']
    return res

def make_request(host):
    global request_count, file_count, res
    request_count += 1
    #if args.ratelimit:
    #    time.sleep(args.ratelimit)

    try:
        answers = res.query(host)
        if answers:
            print(host)
        else:
            pass
    except (DNSException) as e:
        #print('Exception {0}'.format(e))
        pass

def read_hostlist():
    try:
        hostlist = open(args.hostlist, encoding = "ISO-8859-1")
        hosts = hostlist.read().splitlines()
        if hosts:
            if not args.quiet:
                print('{0} hosts read from {1}'.format(len(hosts), hostlist.name))
            return hosts
        else:
            if not args.quiet:
                print("Empty hostlist supplied.. nothing to resolve")
            return []
    except NameError:
        pass

def main_loop(hosts):
    global file_count
    for idx, host in enumerate(hosts):
        file_count += 1
        h = str(host).strip()

        if args.prefix:
            h = '{0}{1}'.format(args.prefix, host)
        if args.suffix:
            h = '{0}{1}'.format(host, args.suffix)
        hosts[idx] = h
    pool = ThreadPool(args.threads)
    new_results = pool.map_async(make_request, hosts)
    pool.close()
    pool.join()

try:
    args = parse_args()
    file_count = 0
    request_count = 0
    if not args.quiet:
        print_banner()
    res = get_resolver()
    hosts = read_hostlist()
    main_loop(hosts)
except KeyboardInterrupt:
    sys.exit(1)
